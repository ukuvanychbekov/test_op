# frozen_string_literal: true

# -- copyright
# OpenProject is an open source project management software.
# Copyright (C) 2023 the OpenProject GmbH
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License version 3.
#
# OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
# Copyright (C) 2006-2013 Jean-Philippe Lang
# Copyright (C) 2010-2013 the ChiliProject Team
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# See COPYRIGHT and LICENSE files for more details.
# ++

require 'spec_helper'
# Require the file for the BaseServices shared example you're keeping
#
# require 'services/base_services/behaves_like_create_service'
# require 'services/base_services/behaves_like_update_service'
# require 'services/base_services/behaves_like_delete_service'

RSpec.describe <%= service_name %> do
  # Keep the BaseServices shared_example that applies from below
  #
  # it_behaves_like 'BaseServices create service'
  # it_behaves_like 'BaseServices update service'
  # it_behaves_like 'BaseService delete service'

  # AND/OR build your own
  # Here's something to get started with
  shared_examples 'is success' do
    it { is_expected.to be_success }
  end

  shared_examples 'is failure' do
    it { is_expected.to be_failure }
  end

  let(:user) { build_stubbed(:user) }
  let(:instance) { described_class.new(user:) }

  subject(:service_call) { instance.call(params) }

  describe '#call' do
    context 'with valid params' do
      let(:params) { raise 'Define me' }

      it_behaves_like 'is success'
    end

    context 'with invalid params' do
      it_behaves_like 'is failure'
    end
  end
end
