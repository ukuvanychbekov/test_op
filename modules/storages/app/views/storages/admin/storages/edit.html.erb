<%#-- copyright
OpenProject is an open source project management software.
Copyright (C) 2012-2023 the OpenProject GmbH

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License version 3.

OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
Copyright (C) 2006-2013 Jean-Philippe Lang
Copyright (C) 2010-2013 the ChiliProject Team

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

See COPYRIGHT and LICENSE files for more details.

++#%>

<%
  label_storage_provider_part = render(Primer::Beta::Text.new(tag: :span, font_weight: :light, color: :muted)) do
    "(#{I18n.t("storages.provider_types.#{@storage.short_provider_type}.name")})"
  end
  label_storage_name_with_provider_label = "#{@storage.name} #{label_storage_provider_part}".html_safe
%>

<% html_title t(:label_administration), t("project_module_storages"), t('label_edit_x', x: @storage.name) %>
<% local_assigns[:additional_breadcrumb] = @storage.name %>

<%= render(Primer::OpenProject::PageHeader.new) do |header| %>
  <% header.with_title(test_selector: 'storage-new-page-header--title') do %>
    <%= render OpTurbo::FrameComponent.new(@storage, context: :edit_storage_header) do %>
      <%= label_storage_name_with_provider_label %>
    <% end %>
  <% end %>

  <% header.with_back_button(href: admin_settings_storages_path, 'aria-label':  I18n.t("button_back")) %>

  <% header.with_parent_link(href: admin_settings_storages_path, 'aria-label':  I18n.t("button_back")) do %>
    <%= t(:project_module_storages) %>
  <% end %>

  <% header.with_actions do %>
    <%=
      primer_form_with(
        model: @storage,
        url: confirm_destroy_admin_settings_storage_path(@storage),
        method: :get
      ) do |_form|
        render(
          Primer::Beta::Button.new(
            scheme: :danger,
            size: :medium,
            type: :submit,
            aria: { label: I18n.t("storages.label_delete_storage") },
            test_selector: 'storage-delete-button'
          )
        ) do |button|
          button.with_leading_visual_icon(icon: :trash)
          I18n.t('button_delete')
        end
      end
    %>
  <% end %>
<% end %>

<% if @storage.provider_type_nextcloud? && @storage.automatically_managed? %>
  <%= render(Primer::Alpha::Layout.new(stacking_breakpoint: :lg)) do |component| %>
    <% component.with_main() do %>
      <%= render(::Storages::Admin::StorageViewComponent.new(@storage)) %>
    <% end %>
    <% component.with_sidebar(col_placement: :end, row_placement: :end) do %>
      <%= render(Primer::OpenProject::BorderGrid.new(spacious: true)) do |grid| %>
        <% grid.with_row do %>
          <%= render(::Storages::Admin::HealthStatusComponent.new(@storage)) %>
        <% end %>
      <% end %>
    <% end %>
  <% end %>
<% else %>
  <%= render(::Storages::Admin::StorageViewComponent.new(@storage)) %>
<% end %>
